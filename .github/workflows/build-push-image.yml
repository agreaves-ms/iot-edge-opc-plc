name: Create and publish a Docker image

on:
  push:
    tags:
      - v*

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: iotedge/opc-plc

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Build code
        run: |
          pwsh ./tools/scripts/build.ps1 -Path .
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build version
        id: meta
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          IMAGE=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          
          IMAGE_LINUX_AMD64=$IMAGE:linux-amd64-$VERSION
          IMAGE_LINUX_ARM64=$IMAGE:linux-arm64v8-$VERSION
          IMAGE_LINUX_ARM=$IMAGE:linux-arm32v7-$VERSION
          IMAGE_WINDOWS=$IMAGE:nanoserver-ltsc2022-amd64-$VERSION
          
          echo "source=${{ github.server_url }}/${{ github.repository }}" >> $GITHUB_OUTPUT
          echo "image_name=$IMAGE" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "image_linux_amd64=$IMAGE_LINUX_AMD64" >> $GITHUB_OUTPUT
          echo "image_linux_arm64=$IMAGE_LINUX_ARM64" >> $GITHUB_OUTPUT
          echo "image_linux_arm=$IMAGE_LINUX_ARM" >> $GITHUB_OUTPUT
          echo "image_windows=$IMAGE_WINDOWS" >> $GITHUB_OUTPUT
          
          cat > opc-plc.yaml <<EOL
          image: $IMAGE:latest
          tags: ["latest", "$VERSION"]
          manifests:
            - image: $IMAGE_LINUX_AMD64
              platform:
                architecture: amd64
                os: linux
            - image: $IMAGE_LINUX_ARM64
              platform:
                architecture: arm64
                os: linux
                variant: v8
            - image: $IMAGE_LINUX_ARM
              platform:
                architecture: arm
                os: linux
                variant: v7
          EOL
          
          cat opc-plc.yaml
          
      - name: Docker Build and push linux arm64
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: "${{ steps.meta.outputs.image_linux_arm64 }}"
          context: ${{ github.workspace }}/src/bin/publish/Release/linux-arm64
          file: ${{ github.workspace }}/src/bin/publish/Release/linux-arm64/Dockerfile.linux-arm64v8
          labels: |
            org.opencontainers.image.source=${{ steps.meta.outputs.source }}
            org.opencontainers.image.licenses=MIT
          
      - name: Docker Build and push linux amd64
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: "${{ steps.meta.outputs.image_linux_amd64 }}"
          context: ${{ github.workspace }}/src/bin/publish/Release/linux-x64
          file: ${{ github.workspace }}/src/bin/publish/Release/linux-x64/Dockerfile.linux-amd64
          labels: |
            org.opencontainers.image.source=${{ steps.meta.outputs.source }}
            org.opencontainers.image.licenses=MIT
          
      - name: Docker Build and push linux arm32
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: "${{ steps.meta.outputs.image_linux_arm }}"
          context: ${{ github.workspace }}/src/bin/publish/Release/linux-arm
          file: ${{ github.workspace }}/src/bin/publish/Release/linux-arm/Dockerfile.linux-arm32v7
          labels: |
            org.opencontainers.image.source=${{ steps.meta.outputs.source }}
            org.opencontainers.image.licenses=MIT
          
      - name: Docker Build and push nanoserver ltsc2022 amd64
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: "${{ steps.meta.outputs.image_windows }}"
          context: ${{ github.workspace }}/src/bin/publish/Release/win-x64
          file: ${{ github.workspace }}/src/bin/publish/Release/win-x64/Dockerfile.nanoserver-ltsc2022-amd64
          labels: |
            org.opencontainers.image.source=${{ steps.meta.outputs.source }}
            org.opencontainers.image.licenses=MIT

      - name: Push Docker Manifest
        run: |
          wget https://github.com/estesp/manifest-tool/releases/download/v2.1.5/binaries-manifest-tool-2.1.5.tar.gz -O binaries-manifest-tool-2.1.5.tar.gz
          tar zxvf binaries-manifest-tool-2.1.5.tar.gz
          chmod +x manifest-tool-linux-amd64
          ./manifest-tool-linux-amd64 push from-spec opc-plc.yaml